{"version":3,"sources":["data/fruits.js","hooks/useFruitHandler.js","components/FruitList.js","App.js","index.js"],"names":["fruits","id","name","useFruitHandler","initialFruitList","useState","fruitList","setFruitsList","handleUp","index","indexFruitToSwap","fruitListOrdered","temp","console","log","handleDown","length","reset","propTypes","PropTypes","shape","string","StyledFruitList","styled","div","StyledFruitRow","Column","ColumnNumber","Button","button","props","FruitList","map","info","onClick","MainContainer","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAoBeA,EApBA,CACX,CACIC,GAAI,EACJC,KAAM,UAEV,CACID,GAAI,EACJC,KAAM,SAEV,CACID,GAAI,EACJC,KAAM,cAEV,CACID,GAAI,EACJC,KAAM,U,gCCXDC,EAAkB,WAAwC,IAAtCC,EAAqC,uDAAjB,CAAEJ,UAAe,EAE/BK,mBAAUD,GAFqB,mBAE3DE,EAF2D,KAEhDC,EAFgD,KAI5DC,EAAW,SAAEC,GAEf,GAAc,IAAVA,EAAa,CAEb,IAAMC,EAAmBD,EAAQ,EAM3BE,EAAgB,YAAOL,GAEvBM,EAAOD,EAAiBF,GAC9BE,EAAiBF,GAASE,EAAiBD,GAC3CC,EAAiBD,GAAoBE,EAErCL,EAAeI,QAGfE,QAAQC,IAAI,yDAKdC,EAAa,SAAEN,GAEjB,GAAIA,EAAQH,EAAUU,OAAS,EAAI,CAE/B,IAAMN,EAAmBD,EAAQ,EAM3BE,EAAgB,YAAOL,GAEvBM,EAAOD,EAAiBF,GAC9BE,EAAiBF,GAASE,EAAiBD,GAC3CC,EAAiBD,GAAoBE,EAErCL,EAAeI,QAGfE,QAAQC,IAAI,yDAIdG,EAAQ,WACVV,EAAeH,IAGnB,MAAO,CACHE,YACAS,aACAP,WACAS,UAKRd,EAAgBe,UAAY,CACxBd,iBAAkBe,IAAUC,MAAM,CAChCnB,GAAIkB,IAAUE,OACdnB,KAAMiB,IAAUE,U,0vBCjEtB,IAAMC,EAAkBC,IAAOC,IAAV,KAQfC,EAAiBF,IAAOC,IAAV,KAOdE,EAASH,IAAOC,IAAV,KAQNG,EAAeJ,YAAOG,EAAPH,CAAH,KAIZK,EAASL,IAAOM,OAAV,KACE,SAAAC,GAAK,OAAIA,EAAMb,MAAQ,OAAS,SAKjCc,EAAY,WAAO,IAAD,EAEwB5B,EAAiBH,GAA5DM,EAFmB,EAEnBA,UAAWE,EAFQ,EAERA,SAAUO,EAFF,EAEEA,WAAYE,EAFd,EAEcA,MAEzC,OACI,eAACK,EAAD,WAEQhB,EAAU0B,KACN,SAAEC,EAAMxB,GAAR,OAEI,eAACgB,EAAD,WAEI,cAACE,EAAD,UACI,4BAAKM,EAAKhC,OAGd,cAACyB,EAAD,UACI,6BAAMO,EAAK/B,SAGf,eAACwB,EAAD,WACI,cAACE,EAAD,CACIM,QAAU,kBAAM1B,EAAUC,IAD9B,oBAKA,cAACmB,EAAD,CACIM,QAAU,kBAAMnB,EAAYN,IADhC,yBAhBcwB,EAAKhC,OA4BvC,cAAC2B,EAAD,CAAQX,OAAK,EACTiB,QAAUjB,EADd,uB,oHCzEZ,IAAMkB,EAAgBZ,IAAOC,IAAV,KAsBJY,MAff,WAEE,OACE,qBAAKC,UAAU,MAAf,SAEA,cAACF,EAAD,UACE,cAAC,EAAD,S,MCZNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0b96333f.chunk.js","sourcesContent":["const fruits = [\n    {\n        id: 1,\n        name: 'Orange'\n    },\n    {\n        id: 2,\n        name: 'Lemon'\n    },\n    {\n        id: 3,\n        name: 'Strawberry'\n    },\n    {\n        id: 4,\n        name: 'Apple'\n    }\n];\n\n\nexport default fruits;","import { useState } from 'react';\nimport fruits from '../data/fruits';\nimport PropTypes from 'prop-types';\n\nexport const useFruitHandler = ( initialFruitList =  { fruits }  ) => {\n    \n    const [fruitList, setFruitsList] = useState( initialFruitList );\n\n    const handleUp = ( index ) => {\n\n        if (index !== 0) {\n\n            const indexFruitToSwap = index - 1;\n\n            /**  \n            * If we want to use arrays or objects in our React state, \n            * we have to create a copy of the value before modifying it\n            **/\n            const fruitListOrdered = [...fruitList];\n\n            const temp = fruitListOrdered[index];\n            fruitListOrdered[index] = fruitListOrdered[indexFruitToSwap];\n            fruitListOrdered[indexFruitToSwap] = temp;\n\n            setFruitsList( fruitListOrdered );\n\n        } else {\n            console.log('Ha llegado al final de la lista y no puede subir mas');\n        }\n    }\n\n\n    const handleDown = ( index ) => {\n\n        if (index < fruitList.length - 1 ) {\n\n            const indexFruitToSwap = index + 1;\n\n            /**  \n            * If we want to use arrays or objects in our React state, \n            * we have to create a copy of the value before modifying it\n            **/\n            const fruitListOrdered = [...fruitList];\n            \n            const temp = fruitListOrdered[index];\n            fruitListOrdered[index] = fruitListOrdered[indexFruitToSwap];\n            fruitListOrdered[indexFruitToSwap] = temp;\n\n            setFruitsList( fruitListOrdered );\n\n        } else {\n            console.log('Ha llegado al final de la lista y no puede bajar mas');\n        }\n    }\n\n    const reset = () => {\n        setFruitsList( initialFruitList );\n    }\n\n    return {\n        fruitList,\n        handleDown,\n        handleUp,\n        reset\n    };\n\n}\n\nuseFruitHandler.propTypes = {\n    initialFruitList: PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string\n    })\n};","import React from 'react';\nimport fruits from '../data/fruits';\nimport { useFruitHandler } from '../hooks/useFruitHandler';\n\nimport styled from 'styled-components';\n\nconst StyledFruitList = styled.div`\n    width: 100%;\n    margin-right: auto;\n    margin-left: auto;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n`\nconst StyledFruitRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    width: 100%;\n`\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex-basis: 100%;\n    flex: 1;\n    border-style: groove;\n`\n\nconst ColumnNumber = styled(Column)`\n    flex: 0 0 3rem;\n`\n\nconst Button = styled.button`\n    height: ${props => props.reset ? \"100%\" : \"50%\"};\n\n    font-size: 1em;\n`;\n\nexport const FruitList = () => {\n\n    const { fruitList, handleUp, handleDown, reset } = useFruitHandler( fruits );\n\n    return (\n        <StyledFruitList>\n            {\n                fruitList.map( \n                    ( info, index ) => (\n\n                        <StyledFruitRow key={ info.id }>\n\n                            <ColumnNumber>\n                                <p>{ info.id }</p>\n                            </ColumnNumber>\n\n                            <Column>\n                                <h3>{ info.name }</h3>\n                            </Column>\n                           \n                            <Column>\n                                <Button \n                                    onClick={ () => handleUp( index )  }\n                                >\n                                    ▲\n                                </Button>\n                                <Button \n                                    onClick={ () => handleDown( index ) }\n                                >\n                                    ▼\n                                </Button>\n                            </Column>\n                        \n                        </StyledFruitRow>\n                    )\n                )\n            }\n\n            <Button reset\n                onClick={ reset }\n            >\n                Reset\n            </Button>\n        </StyledFruitList>\n    )\n}","import { FruitList } from './components/FruitList';\n\nimport styled from 'styled-components'\n\nconst MainContainer = styled.div`\n\n  margin: 12rem;\n  text-align: center;\n\n`\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n    <MainContainer>\n      <FruitList />\n    </MainContainer>\n\n\n    </div>\n  );\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}